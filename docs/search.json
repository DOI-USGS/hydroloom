[{"path":"https://doi-usgs.github.io/hydroloom/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Blodgett. Author, maintainer.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Blodgett D (2023). hydroloom: Utilities Weave Hydrologic Fabrics. R package version 1.0.0, https://doi-usgs.github.io/hydroloom/.","code":"@Manual{,   title = {hydroloom: Utilities to Weave Hydrologic Fabrics},   author = {David Blodgett},   year = {2023},   note = {R package version 1.0.0},   url = {https://doi-usgs.github.io/hydroloom/}, }"},{"path":"https://doi-usgs.github.io/hydroloom/DISCLAIMER.html","id":null,"dir":"","previous_headings":"","what":"Disclaimer","title":"Disclaimer","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":[]},{"path":"https://doi-usgs.github.io/hydroloom/index.html","id":"hydroloom","dir":"","previous_headings":"","what":"hydroloom:","title":"Utilities to Weave Hydrologic Fabrics","text":"hydroloom collection general hydrologic geospatial fabric creation tools. created generic components nhdplusTools: Development hydroloom underway rapid change expected.","code":"Blodgett, D., Johnson, J.M., 2022, nhdplusTools: Tools for       Accessing and Working with the NHDPlus,       https://doi.org/10.5066/P97AS8JD"},{"path":"https://doi-usgs.github.io/hydroloom/index.html","id":"design-notes","dir":"","previous_headings":"","what":"Design Notes:","title":"Utilities to Weave Hydrologic Fabrics","text":"Using tibble dplyr verbs data.frame dropping custom hy attributes. hy class tibble standardizes attribute names code. graph representation facilitated make_index_ids() make_fromids()","code":""},{"path":"https://doi-usgs.github.io/hydroloom/index.html","id":"disclaimer","dir":"","previous_headings":"","what":"Disclaimer","title":"Utilities to Weave Hydrologic Fabrics","text":"software preliminary provisional subject revision. provided meet need timely best science. software received final approval U.S. Geological Survey (USGS). warranty, expressed implied, made USGS U.S. Government functionality software related material shall fact release constitute warranty. software provided condition neither USGS U.S. Government shall held liable damages resulting authorized unauthorized use software.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/accumulate_downstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Accumulate Variable Downstream — accumulate_downstream","title":"Accumulate Variable Downstream — accumulate_downstream","text":"given variable, accumulate according network topology.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/accumulate_downstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accumulate Variable Downstream — accumulate_downstream","text":"","code":"accumulate_downstream(x, var)  # S3 method for data.frame accumulate_downstream(x, var)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/accumulate_downstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accumulate Variable Downstream — accumulate_downstream","text":"x data.frame network compatible hydroloom_names. var variable accumulate.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/accumulate_downstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accumulate Variable Downstream — accumulate_downstream","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  x$totDASqKM <- accumulate_downstream(add_toids(x), \"AreaSqKM\")  plot(x['totDASqKM'], lwd = x$totDASqKM / 50)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_levelpaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Level Paths — add_levelpaths","title":"Assign Level Paths — add_levelpaths","text":"Assigns level paths using stream-leveling approach NHD NHDPlus. arbolate sum provided weight column, match behavior NHDPlus. numeric value can included column largest value followed nameid available.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_levelpaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Level Paths — add_levelpaths","text":"","code":"add_levelpaths(   x,   name_attribute,   weight_attribute,   override_factor = NULL,   status = FALSE )  # S3 method for data.frame add_levelpaths(   x,   name_attribute,   weight_attribute,   override_factor = NULL,   status = FALSE )  # S3 method for hy add_levelpaths(   x,   name_attribute,   weight_attribute,   override_factor = NULL,   status = FALSE )"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_levelpaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Level Paths — add_levelpaths","text":"x data.frame network compatible hydroloom_names. name_attribute character attribute used name identifiers. weight_attribute character attribute used weight. override_factor numeric multiplier use override name_attribute. status boolean status updates printed.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_levelpaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Level Paths — add_levelpaths","text":"data.frame id, levelpath_outlet_id, topo_sort, levelpath columns. See details info.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_levelpaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign Level Paths — add_levelpaths","text":"levelpath algorithm defines upstream mainstem paths network. given junction two upstream flowpaths, main path either 1) path name, 2) path name, 3) path larger weight. weight_attribute override_factor times larger path, followed regardless name_attribute indication.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_levelpaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign Level Paths — add_levelpaths","text":"","code":"g <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  test_flowline <- add_toids(g)  # use nhdplus attributes directly add_levelpaths(test_flowline, \"GNIS_ID\", \"ArbolateSu\") #> Simple feature collection with 746 features and 37 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 1496152 ymin: 1551203 xmax: 1527383 ymax: 1577303 #> CRS:           unknown #> # A tibble: 746 × 38 #>      COMID    toid levelpath…¹ Hydro…² Level…³                      geom GNIS_ID #>  *   <int>   <dbl>       <int>   <int>   <dbl>     <MULTILINESTRING [m]> <chr>   #>  1 8897784       0     8897784       1       1 ((1514515 1553152, 15143… \"99103… #>  2 8894360 8897784     8897784       2       1 ((1514541 1553188, 15145… \" \"     #>  3 8894356 8894360     8897784       3       1 ((1515465 1553664, 15149… \"99103… #>  4 8894354 8894356     8897784       4       1 ((1515773 1554056, 15157… \"99103… #>  5 8894350 8894354     8894350       5       5 ((1517098 1554192, 15170… \"98735… #>  6 8893884 8894350     8894350       6       5 ((1518746 1554515, 15187… \"98735… #>  7 8894204 8893884     8894204       7       7 ((1519309 1554165, 15191… \" \"     #>  8 8893898 8894204     8894204       8       7 ((1521411 1552990, 15212… \" \"     #>  9 8894202 8893884     8894350       9       5 ((1520368 1554597, 15203… \"98735… #> 10 8893894 8894202     8894350      10       5 ((1521969 1553433, 15218… \"98735… #> # … with 736 more rows, 31 more variables: GNIS_NAME <chr>, LENGTHKM <dbl>, #> #   REACHCODE <chr>, WBAREACOMI <int>, FTYPE <chr>, FCODE <int>, #> #   StreamLeve <int>, StreamOrde <int>, StreamCalc <int>, FromNode <dbl>, #> #   ToNode <dbl>, Pathlength <dbl>, TerminalPa <dbl>, ArbolateSu <dbl>, #> #   Divergence <int>, StartFlag <int>, TerminalFl <int>, DnLevel <int>, #> #   UpLevelPat <dbl>, UpHydroseq <dbl>, DnLevelPat <dbl>, DnMinorHyd <dbl>, #> #   DnDrainCou <int>, DnHydroseq <dbl>, FromMeas <dbl>, ToMeas <dbl>, …  # use hy attributes where they can be mapped add_levelpaths(hy(test_flowline), \"GNIS_ID\", \"arbolate_sum\") #> Simple feature collection with 746 features and 37 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 1496152 ymin: 1551203 xmax: 1527383 ymax: 1577303 #> CRS:           unknown #> # A tibble: 746 × 38 #>         id    toid levelpath…¹ topo_…² level…³                      geom GNIS_ID #>      <int>   <dbl>       <int>   <int>   <dbl>     <MULTILINESTRING [m]> <chr>   #>  1 8897784       0     8897784       1       1 ((1514515 1553152, 15143… \"99103… #>  2 8894360 8897784     8897784       2       1 ((1514541 1553188, 15145… \" \"     #>  3 8894356 8894360     8897784       3       1 ((1515465 1553664, 15149… \"99103… #>  4 8894354 8894356     8897784       4       1 ((1515773 1554056, 15157… \"99103… #>  5 8894350 8894354     8894350       5       5 ((1517098 1554192, 15170… \"98735… #>  6 8893884 8894350     8894350       6       5 ((1518746 1554515, 15187… \"98735… #>  7 8894204 8893884     8894204       7       7 ((1519309 1554165, 15191… \" \"     #>  8 8893898 8894204     8894204       8       7 ((1521411 1552990, 15212… \" \"     #>  9 8894202 8893884     8894350       9       5 ((1520368 1554597, 15203… \"98735… #> 10 8893894 8894202     8894350      10       5 ((1521969 1553433, 15218… \"98735… #> # … with 736 more rows, 31 more variables: GNIS_NAME <chr>, length_km <dbl>, #> #   aggregate_id <chr>, wbid <int>, feature_type <chr>, #> #   feature_type_code <int>, stream_level <int>, StreamOrde <int>, #> #   dendritic_stream_order <int>, fromnode <dbl>, tonode <dbl>, #> #   pathlength_km <dbl>, terminal_topo_sort <dbl>, arbolate_sum <dbl>, #> #   divergence <int>, start_flag <int>, terminal_flag <int>, #> #   dn_stream_level <int>, up_levelpath <dbl>, up_topo_sort <dbl>, …"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pathlength.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Path Length — add_pathlength","title":"Add Path Length — add_pathlength","text":"Generates main path length basin's terminal path.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pathlength.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Path Length — add_pathlength","text":"","code":"add_pathlength(x)  # S3 method for data.frame add_pathlength(x)  # S3 method for hy add_pathlength(x)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pathlength.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Path Length — add_pathlength","text":"x data.frame network compatible hydroloom_names.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pathlength.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Path Length — add_pathlength","text":"data.frame containing pathlength_km","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pathlength.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Path Length — add_pathlength","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  x <- add_toids(x)  x <- add_pathlength(x)  plot(x[\"Pathlength\"])"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pfafstetter.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Pfafstetter Codes (Experimental) — add_pfafstetter","title":"Add Pfafstetter Codes (Experimental) — add_pfafstetter","text":"Determines Pfafstetter codes dendritic network total drainage area, levelpath, topo_sort attributes.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pfafstetter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Pfafstetter Codes (Experimental) — add_pfafstetter","text":"","code":"add_pfafstetter(x, max_level = 2, status = FALSE)  # S3 method for data.frame add_pfafstetter(x, max_level = 2, status = FALSE)  # S3 method for hy add_pfafstetter(x, max_level = 2, status = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pfafstetter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Pfafstetter Codes (Experimental) — add_pfafstetter","text":"x data.frame network compatible hydroloom_names. max_level integer number pfaf levels attempt calculate. network resolution support desired level, unexpected behavior may occur. status boolean status updates printed.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pfafstetter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Pfafstetter Codes (Experimental) — add_pfafstetter","text":"data.frame added pfafstetter column","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_pfafstetter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Pfafstetter Codes (Experimental) — add_pfafstetter","text":"","code":"x <- add_toids(x) #> Error in add_toids(x): object 'x' not found  pfaf <- add_pfafstetter(x, max_level = 2) #> Error in add_pfafstetter(x, max_level = 2): object 'x' not found  plot(pfaf[\"pf_level_2\"], lwd = 2) #> Error in plot(pfaf[\"pf_level_2\"], lwd = 2): object 'pfaf' not found  work_dir <- nhdplusTools::nhdplusTools_data_dir()  source(system.file(\"extdata/nhdplushr_data.R\", package = \"nhdplusTools\"))  x <- hy(hr_data$NHDFlowline)  x <- add_toids(x)  x <- dplyr::select(x, id, toid, da_sqkm)  #' add terminal_id -- add in function? x <- sort_network(x, split = TRUE)  x$total_da_sqkm <- accumulate_downstream(x, \"da_sqkm\") x$name <- \"\"  x <- add_levelpaths(x, name_attribute = \"name\", weight_attribute = \"total_da_sqkm\")  x <- add_pfafstetter(x, max_level = 3)  plot(x[\"pf_level_3\"], lwd = 2)   pfaf <- add_pfafstetter(x, max_level = 4)  hr_catchment <- dplyr::left_join(hr_data$NHDPlusCatchment,                                  drop_geometry(pfaf), by = c(\"FEATUREID\" = \"id\"))  colors <- data.frame(pf_level_4 = unique(hr_catchment$pf_level_4),                      color = sample(terrain.colors(length(unique(hr_catchment$pf_level_4)))))  hr_catchment <- dplyr::left_join(hr_catchment, colors, by = \"pf_level_4\")  plot(hr_catchment[\"color\"], border = NA, reset = FALSE) plot(sf::st_geometry(x), col = \"blue\", add = TRUE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamlevel.html","id":null,"dir":"Reference","previous_headings":"","what":"add Streamlevel — add_streamlevel","title":"add Streamlevel — add_streamlevel","text":"Applies topological sort calculates stream level. Algorithm: Terminal level paths assigned level 1 (see note 1). Paths terminate level 1 assigned level 2. pattern repeated paths remain. TRUE/FALSE coastal attribute included, coastal terminal paths begin 1 internal terminal paths begin 4 implemented NHD stream leveling rules.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamlevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add Streamlevel — add_streamlevel","text":"","code":"add_streamlevel(x, coastal = NULL)  # S3 method for data.frame add_streamlevel(x, coastal = NULL)  # S3 method for hy add_streamlevel(x, coastal = NULL)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamlevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add Streamlevel — add_streamlevel","text":"x data.frame network compatible hydroloom_names. coastal character attribute name containing logical flag indicating given terminal catchment flows coast inland sink. coastal flag included, terminal paths assumed coastal.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamlevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add Streamlevel — add_streamlevel","text":"data,frame containing added stream_level attribute","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamlevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add Streamlevel — add_streamlevel","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  x <- add_toids(x)  y <- add_streamlevel(x)  plot(sf::st_geometry(y), lwd = y$streamlevel, col = \"blue\") #> Warning: Unknown or uninitialised column: `streamlevel`. #> Warning: 'x' is NULL so the result will be NULL   x$coastal <- rep(FALSE, nrow(x))  y <- add_streamlevel(x, coastal = \"coastal\")  unique(y$streamlevel) #> Warning: Unknown or uninitialised column: `streamlevel`. #> NULL  x$coastal[!x$Hydroseq == min(x$Hydroseq)] <- TRUE  y <- add_streamlevel(x)  unique(y$streamlevel) #> Warning: Unknown or uninitialised column: `streamlevel`. #> NULL"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamorder.html","id":null,"dir":"Reference","previous_headings":"","what":"add Streamorder — add_streamorder","title":"add Streamorder — add_streamorder","text":"Adds strahler stream order. Algorithm: one upstream flowpath order equal maximum upstream order downstream flowpath assigned maximum upstream order plus one. Otherwise assigned maximum upstream order. match nhdplus algorithm, non-dendritic network connectivity divergence attribute must included. secondary paths stream_order upstream primary paths stream_calc value 0. Secondary paths affect order downstream paths.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamorder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add Streamorder — add_streamorder","text":"","code":"add_streamorder(x, status = TRUE)  # S3 method for data.frame add_streamorder(x, status = TRUE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamorder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add Streamorder — add_streamorder","text":"x data.frame network compatible hydroloom_names. status boolean status updates printed.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamorder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add Streamorder — add_streamorder","text":"data.frame containing added stream_order stream_calc attribute.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_streamorder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add Streamorder — add_streamorder","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  x <- add_toids(x, return_dendritic = FALSE)  x <- add_streamorder(x)  plot(sf::st_geometry(x), lwd = x$stream_order, col = \"blue\")  plot(sf::st_geometry(x), lwd = x$stream_calc, col = \"blue\")"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_toids.html","id":null,"dir":"Reference","previous_headings":"","what":"add toids — add_toids","title":"add toids — add_toids","text":"Given input fromnode tonode attributes, return input toid attribute result joining tonode fromnode attributes.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_toids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add toids — add_toids","text":"","code":"add_toids(x, return_dendritic = TRUE)  # S3 method for data.frame add_toids(x, return_dendritic = TRUE)  # S3 method for hy add_toids(x, return_dendritic = TRUE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_toids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add toids — add_toids","text":"x data.frame network compatible hydroloom_names. return_dendritic logical remove non dendritic paths TRUE. Requires \"divergence\" flag 1 main 2 secondary.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_toids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add toids — add_toids","text":"hy object toid attribute","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/add_toids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"add toids — add_toids","text":"","code":"g <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  x <- add_toids(hy(g))  y <- add_toids(g)  names(g)[1:4] #> [1] \"COMID\"     \"GNIS_ID\"   \"GNIS_NAME\" \"LENGTHKM\"   names(x)[1:4] #> [1] \"id\"        \"toid\"      \"GNIS_ID\"   \"GNIS_NAME\"  names(y)[1:4] #> [1] \"COMID\"     \"toid\"      \"GNIS_ID\"   \"GNIS_NAME\""},{"path":"https://doi-usgs.github.io/hydroloom/reference/align_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Align names to hydroloom convention — align_names","title":"Align names to hydroloom convention — align_names","text":"function aligns attribute names x used hydroloom. See hydroloom_names add attribute name mappings attributes data supported. See hydroloom_name_definitions definitions names used hydroloom.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/align_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align names to hydroloom convention — align_names","text":"","code":"align_names(x)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/align_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align names to hydroloom convention — align_names","text":"x data.frame network compatible hydroloom_names.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/align_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align names to hydroloom convention — align_names","text":"data.frame renamed match hydroloom possible.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/align_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align names to hydroloom convention — align_names","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  names(x) #>  [1] \"COMID\"      \"GNIS_ID\"    \"GNIS_NAME\"  \"LENGTHKM\"   \"REACHCODE\"  #>  [6] \"WBAREACOMI\" \"FTYPE\"      \"FCODE\"      \"StreamLeve\" \"StreamOrde\" #> [11] \"StreamCalc\" \"FromNode\"   \"ToNode\"     \"Hydroseq\"   \"LevelPathI\" #> [16] \"Pathlength\" \"TerminalPa\" \"ArbolateSu\" \"Divergence\" \"StartFlag\"  #> [21] \"TerminalFl\" \"DnLevel\"    \"UpLevelPat\" \"UpHydroseq\" \"DnLevelPat\" #> [26] \"DnMinorHyd\" \"DnDrainCou\" \"DnHydroseq\" \"FromMeas\"   \"ToMeas\"     #> [31] \"RtnDiv\"     \"VPUIn\"      \"VPUOut\"     \"AreaSqKM\"   \"TotDASqKM\"  #> [36] \"geom\"        x <- align_names(x)  names(x) #>  [1] \"id\"                        \"GNIS_ID\"                   #>  [3] \"GNIS_NAME\"                 \"length_km\"                 #>  [5] \"aggregate_id\"              \"wbid\"                      #>  [7] \"feature_type\"              \"feature_type_code\"         #>  [9] \"stream_level\"              \"StreamOrde\"                #> [11] \"dendritic_stream_order\"    \"fromnode\"                  #> [13] \"tonode\"                    \"topo_sort\"                 #> [15] \"levelpath\"                 \"pathlength_km\"             #> [17] \"terminal_topo_sort\"        \"arbolate_sum\"              #> [19] \"divergence\"                \"start_flag\"                #> [21] \"terminal_flag\"             \"dn_stream_level\"           #> [23] \"up_levelpath\"              \"up_topo_sort\"              #> [25] \"dn_levelpath\"              \"dn_minor_topo_sort\"        #> [27] \"DnDrainCou\"                \"dn_topo_sort\"              #> [29] \"aggregate_id_from_measure\" \"aggregate_id_to_measure\"   #> [31] \"RtnDiv\"                    \"VPUIn\"                     #> [33] \"VPUOut\"                    \"da_sqkm\"                   #> [35] \"total_da_sqkm\"             \"geom\""},{"path":"https://doi-usgs.github.io/hydroloom/reference/disambiguate_indexes.html","id":null,"dir":"Reference","previous_headings":"","what":"Disambiguate Flowline Indexes — disambiguate_indexes","title":"Disambiguate Flowline Indexes — disambiguate_indexes","text":"Given set flowline indexes numeric ascii criteria, return closest match. numeric criteria used, minimum difference numeric attribute used disambiguation. ascii criteria used, adist function used following algorithm: 1 - adist_score / max_string_length. Comparisons ignore case.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/disambiguate_indexes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disambiguate Flowline Indexes — disambiguate_indexes","text":"","code":"disambiguate_indexes(indexes, flowpath, hydro_location)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/disambiguate_indexes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disambiguate Flowline Indexes — disambiguate_indexes","text":"indexes data.frame output get_flowline_index one hydrologic location per indexed point. flowpath data.frame two columns. first join COMID field indexes second numeric ascii metric drainage area GNIS Name. Names data.frame used. hydro_location data.frame two columns. first join id field indexes second numeric ascii metric drainage area GNIS Name.. Names data,frame used.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/disambiguate_indexes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disambiguate Flowline Indexes — disambiguate_indexes","text":"data.frame indexes deduplicated according minimum difference values metric columns. two result \"minimum\" value, duplicates returned.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/disambiguate_indexes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disambiguate Flowline Indexes — disambiguate_indexes","text":"","code":"source(system.file(\"extdata\", \"sample_flines.R\", package = \"nhdplusTools\"))  hydro_location <- sf::st_sf(id = c(1, 2, 3),                             geom = sf::st_sfc(list(sf::st_point(c(-76.86934, 39.49328)),                                                    sf::st_point(c(-76.91711, 39.40884)),                                                    sf::st_point(c(-76.88081, 39.36354))),                                               crs = 4326),                             totda = c(23.6, 7.3, 427.9),                             nameid = c(\"Patapsco\", \"\", \"Falls Run River\"))  indexes <- index_points_to_lines(sample_flines,                                  hydro_location,                                  search_radius = units::set_units(0.2, \"degrees\"),                                  max_matches = 10)  disambiguate_indexes(indexes,                      dplyr::select(sample_flines, COMID, TotDASqKM),                      dplyr::select(hydro_location, id, totda)) #> # A tibble: 3 × 5 #>   point_id    COMID REACHCODE      REACHCODE_measure    offset #>      <dbl>    <int> <chr>                      <dbl>     <dbl> #> 1        1 11688298 02060003000579               0   0.0000603 #> 2        2 11688808 02060003000519              53.6 0.000564  #> 3        3 11688950 02060003000254              18.5 0.00113    result <- disambiguate_indexes(indexes,                                dplyr::select(sample_flines, COMID, GNIS_NAME),                                dplyr::select(hydro_location, id, nameid))  result[result$point_id == 1, ] #> # A tibble: 3 × 5 #>   point_id    COMID REACHCODE      REACHCODE_measure  offset #>      <dbl>    <int> <chr>                      <dbl>   <dbl> #> 1        1 11689928 02060003001468                 0 0.00203 #> 2        1 11689978 02060003001472               100 0.00203 #> 3        1 11690532 02060003000256                 0 0.00451  result[result$point_id == 2, ] #> # A tibble: 10 × 5 #>    point_id    COMID REACHCODE      REACHCODE_measure   offset #>       <dbl>    <int> <chr>                      <dbl>    <dbl> #>  1        2 11688808 02060003000519              53.6 0.000564 #>  2        2 11690110 02060003001493             100   0.00742  #>  3        2 11688822 02060003000518              39.5 0.00768  #>  4        2 11688742 02060003000521               0   0.00855  #>  5        2 11688778 02060003000520               0   0.00855  #>  6        2 11690112 02060003001494             100   0.00955  #>  7        2 11690122 02060003001495             100   0.0103   #>  8        2 11688868 02060003000517              27.8 0.0169   #>  9        2 11690124 02060003001496             100   0.0195   #> 10        2 11690128 02060003001498             100   0.0210    result[result$point_id == 3, ] #> # A tibble: 1 × 5 #>   point_id    COMID REACHCODE      REACHCODE_measure  offset #>      <dbl>    <int> <chr>                      <dbl>   <dbl> #> 1        3 11688948 02060003000516                 0 0.00321"},{"path":"https://doi-usgs.github.io/hydroloom/reference/drop_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"drop_geometry — drop_geometry","title":"drop_geometry — drop_geometry","text":"drops geometry present, nothing otherwise.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/drop_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drop_geometry — drop_geometry","text":"","code":"drop_geometry(x)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/drop_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drop_geometry — drop_geometry","text":"x data.frame may contain geometry column","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/drop_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drop_geometry — drop_geometry","text":"data.frame without geometry column","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/drop_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drop_geometry — drop_geometry","text":"","code":"(g <- sf::st_sf(a=3, geo = sf::st_sfc(sf::st_point(1:2)))) #> Simple feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #>   a         geo #> 1 3 POINT (1 2) drop_geometry(g) #>   a #> 1 3"},{"path":"https://doi-usgs.github.io/hydroloom/reference/fix_flowdir.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix flow direction — fix_flowdir","title":"Fix flow direction — fix_flowdir","text":"flowlines digitized expected direction, reorder nodes .","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/fix_flowdir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix flow direction — fix_flowdir","text":"","code":"fix_flowdir(id, network = NULL, fn_list = NULL)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/fix_flowdir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix flow direction — fix_flowdir","text":"id integer id flowline check network data.frame network compatible hydroloom_names. fn_list list containing named elements flowline, network, check_end, flowline flowline checked network feature downstream flowline checked, check_end \"start\" \"end\" depending network input upstream (\"start\") downstream (\"end\") flowline checked. option allows pre-compilation pairs features may useful large numbers flow direction checks.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/fix_flowdir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix flow direction — fix_flowdir","text":"geometry feature reversed needed.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/fix_flowdir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix flow direction — fix_flowdir","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  # We add a tocomid with prepare_nhdplus x <- add_toids(hy(x))  # Look at the end node of the 10th line. (n1 <- get_node(x[10, ], position = \"end\")) #> Simple feature collection with 1 feature and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1520118 ymin: 1560497 xmax: 1520118 ymax: 1560497 #> CRS:           unknown #> # A tibble: 1 × 1 #>            geometry #> *       <POINT [m]> #> 1 (1520118 1560497)  # Break the geometry by reversing it. sf::st_geometry(x)[10] <- sf::st_reverse(sf::st_geometry(x)[10])  # Note that the end node is different now. (n2 <- get_node(x[10, ], position = \"end\")) #> Simple feature collection with 1 feature and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1520229 ymin: 1560983 xmax: 1520229 ymax: 1560983 #> CRS:           unknown #> # A tibble: 1 × 1 #>            geometry #> *       <POINT [m]> #> 1 (1520229 1560983)  # Pass the broken geometry to fix_flowdir with the network for toCOMID sf::st_geometry(x)[10] <- fix_flowdir(x$COMID[10], x) #> Warning: Unknown or uninitialised column: `COMID`. #> Error in vectbl_as_row_location(i, nr, i_arg, assign) :  #>   Can't subset rows with `i`. #> ✖ Logical subscript `i` must be size 1 or 746, not 0. #> Error: Not compatible with requested type: [type=character; target=double].  # Note that the geometry is now in the right order. (n3 <- get_node(x[10, ], position = \"end\")) #> Simple feature collection with 1 feature and 0 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1520229 ymin: 1560983 xmax: 1520229 ymax: 1560983 #> CRS:           unknown #> # A tibble: 1 × 1 #>            geometry #> *       <POINT [m]> #> 1 (1520229 1560983)  plot(sf::st_geometry(x)[10]) plot(n1, add = TRUE) plot(n2, add = TRUE, col = \"blue\") plot(n3, add = TRUE, cex = 2, col = \"red\")"},{"path":"https://doi-usgs.github.io/hydroloom/reference/format_index_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"format index ids — format_index_ids","title":"format index ids — format_index_ids","text":"format index ids","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/format_index_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"format index ids — format_index_ids","text":"","code":"format_index_ids(g, return_list = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/format_index_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"format index ids — format_index_ids","text":"g data.frame id, inid toindid returned make_index_ids long_form=TRUE. complete logical data.frame list column included return?","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/format_index_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"format index ids — format_index_ids","text":"list containing adjacency matrix lengths vector indicating number connections node. complete TRUE return also include data.frame indid column toindid list column.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/format_index_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"format index ids — format_index_ids","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  y <- add_toids(x) |>   make_index_ids(long_form = TRUE) |>   format_index_ids()"},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_hydro_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hydro Location — get_hydro_location","title":"Get Hydro Location — get_hydro_location","text":"given flowline index, returns hydrologic location (point) along specific linear element referenced index.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_hydro_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hydro Location — get_hydro_location","text":"","code":"get_hydro_location(indexes, flowpath)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_hydro_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hydro Location — get_hydro_location","text":"indexes data.frame output get_flowline_index. flowpath data.frame three columns: COMID, FromMeas, ToMeas well geometry.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_hydro_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Hydro Location — get_hydro_location","text":"","code":"source(system.file(\"extdata\", \"sample_flines.R\", package = \"nhdplusTools\"))  indexes <- index_points_to_lines(sample_flines,                    sf::st_sfc(sf::st_sfc(list(sf::st_point(c(-76.86934, 39.49328)),                                               sf::st_point(c(-76.91711, 39.40884)),                                               sf::st_point(c(-76.88081, 39.36354))),                               crs = 4326)))  get_hydro_location(indexes, sample_flines) #> Geometry set for 3 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -76.91761 ymin: 39.3633 xmax: -76.8694 ymax: 39.49326 #> Geodetic CRS:  WGS 84 #> POINT (-76.8694 39.49326) #> POINT (-76.91761 39.40909) #> POINT (-76.881 39.3633)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_node.html","id":null,"dir":"Reference","previous_headings":"","what":"Get line Node — get_node","title":"Get line Node — get_node","text":"Given one lines, returns particular node line.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_node.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get line Node — get_node","text":"","code":"get_node(x, position = \"end\")"},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_node.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get line Node — get_node","text":"x sf sf data.frame one LINESTRING features position character either \"start\" \"end\"","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_node.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get line Node — get_node","text":"sf data.frame containing requested nodes","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_node.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get line Node — get_node","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  start <- get_node(x, \"start\") end <- get_node(x, \"end\")  plot(sf::st_zm(sf::st_geometry(x)),      lwd = x$StreamOrde, col = \"blue\") plot(sf::st_geometry(start), add = TRUE)   plot(sf::st_zm(sf::st_geometry(x)),      lwd = x$StreamOrde, col = \"blue\") plot(sf::st_geometry(end), add = TRUE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_partial_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Partial Flowpath Length — get_partial_length","title":"Get Partial Flowpath Length — get_partial_length","text":"Finds upstream downstream lengths along given flowpath (flowline nhdplus terminology). Internally, function rescales aggregate_id_measure id_measure applies rescaled measure length flowpath.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_partial_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Partial Flowpath Length — get_partial_length","text":"","code":"get_partial_length(hydro_location, network = NULL, flowpath = NULL)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_partial_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Partial Flowpath Length — get_partial_length","text":"hydro_location list containing hydrologic locations names aggregate_id (reachcode) aggregate_id_measure (reachcode measure). network data.frame network compatible hydroloom_names. flowpath data.frame containing one flowpath corresponds hydro_location. required x provided. x required flowpath provided.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_partial_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Partial Flowpath Length — get_partial_length","text":"list containing dn elements numeric length km.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/get_partial_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Partial Flowpath Length — get_partial_length","text":"","code":"x <- sf::read_sf(system.file(\"extdata\", \"walker.gpkg\", package = \"hydroloom\"))  hydro_location <- list(comid = 5329339,                        reachcode = \"18050005000078\",                        reach_meas = 30)  (pl <- get_partial_length(hydro_location, x)) #> $dn #> [1] 1.4358 #>  #> $up #> [1] 3.3502 #>"},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy.html","id":null,"dir":"Reference","previous_headings":"","what":"create an hy fabric object — hy","title":"create an hy fabric object — hy","text":"converts compatible dataset fabric s3 class","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create an hy fabric object — hy","text":"","code":"hy(x, clean = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create an hy fabric object — hy","text":"x data.frame network compatible hydroloom_names. clean logical TRUE, geometry non-hydroloom compatible attributes removed.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create an hy fabric object — hy","text":"hy object attributes compatible hydroloom package.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create an hy fabric object — hy","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  hy(x) #> Simple feature collection with 746 features and 35 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 1496152 ymin: 1551203 xmax: 1527383 ymax: 1577303 #> CRS:           unknown #> # A tibble: 746 × 36 #>        id GNIS_ID GNIS_…¹ lengt…² aggre…³   wbid featu…⁴ featu…⁵ strea…⁶ Strea…⁷ #>     <int> <chr>   <chr>     <dbl> <chr>    <int> <chr>     <int>   <int>   <int> #>  1 8.89e6 991288  Northe…   3.24  030300… 0      Stream…   46006       3       4 #>  2 8.89e6 991288  Northe…   0.002 030300… 0      Connec…   33400       3       4 #>  3 8.89e6 991288  Northe…   0.102 030300… 0      Connec…   33400       3       4 #>  4 8.89e6 991288  Northe…   0.073 030300… 8.89e6 Artifi…   55800       3       4 #>  5 8.89e6 991288  Northe…   0.008 030300… 8.89e6 Artifi…   55800       3       4 #>  6 8.89e6 991288  Northe…   0.954 030300… 0      Stream…   46006       3       4 #>  7 8.89e6 991288  Northe…   0.219 030300… 0      Stream…   46006       3       4 #>  8 8.89e6 991288  Northe…   3.09  030300… 0      Stream…   46006       3       4 #>  9 8.89e6 991288  Northe…   0.045 030300… 8.89e6 Artifi…   55800       3       4 #> 10 8.89e6 991288  Northe…   0.583 030300… 0      Stream…   46006       3       4 #> # … with 736 more rows, 26 more variables: dendritic_stream_order <int>, #> #   fromnode <dbl>, tonode <dbl>, topo_sort <dbl>, levelpath <dbl>, #> #   pathlength_km <dbl>, terminal_topo_sort <dbl>, arbolate_sum <dbl>, #> #   divergence <int>, start_flag <int>, terminal_flag <int>, #> #   dn_stream_level <int>, up_levelpath <dbl>, up_topo_sort <dbl>, #> #   dn_levelpath <dbl>, dn_minor_topo_sort <dbl>, DnDrainCou <int>, #> #   dn_topo_sort <dbl>, aggregate_id_from_measure <dbl>, …  hy(x, clean = TRUE)[1:10,] #> # A tibble: 10 × 28 #>         id lengt…¹ aggre…²   wbid featu…³ featu…⁴ strea…⁵ dendr…⁶ fromn…⁷ tonode #>      <int>   <dbl> <chr>    <int> <chr>     <int>   <int>   <int>   <dbl>  <dbl> #>  1 8893864   3.24  030300… 0      Stream…   46006       3       4  2.50e8 2.50e8 #>  2 8894490   0.002 030300… 0      Connec…   33400       3       4  2.50e8 2.50e8 #>  3 8894494   0.102 030300… 0      Connec…   33400       3       4  2.50e8 2.50e8 #>  4 8894334   0.073 030300… 8.89e6 Artifi…   55800       3       4  2.50e8 2.50e8 #>  5 8894492   0.008 030300… 8.89e6 Artifi…   55800       3       4  2.50e8 2.50e8 #>  6 8893850   0.954 030300… 0      Stream…   46006       3       4  2.50e8 2.50e8 #>  7 8893842   0.219 030300… 0      Stream…   46006       3       4  2.50e8 2.50e8 #>  8 8894192   3.09  030300… 0      Stream…   46006       3       4  2.50e8 2.50e8 #>  9 8894310   0.045 030300… 8.89e6 Artifi…   55800       3       4  2.50e8 2.50e8 #> 10 8893810   0.583 030300… 0      Stream…   46006       3       4  2.50e8 2.50e8 #> # … with 18 more variables: topo_sort <dbl>, levelpath <dbl>, #> #   pathlength_km <dbl>, terminal_topo_sort <dbl>, arbolate_sum <dbl>, #> #   divergence <int>, start_flag <int>, terminal_flag <int>, #> #   dn_stream_level <int>, up_levelpath <dbl>, up_topo_sort <dbl>, #> #   dn_levelpath <dbl>, dn_minor_topo_sort <dbl>, dn_topo_sort <dbl>, #> #   aggregate_id_from_measure <dbl>, aggregate_id_to_measure <dbl>, #> #   da_sqkm <dbl>, total_da_sqkm <dbl>, and abbreviated variable names …  attr(hy(x), \"orig_names\") #>                       COMID                     GNIS_ID  #>                        \"id\"                   \"GNIS_ID\"  #>                   GNIS_NAME                    LENGTHKM  #>                 \"GNIS_NAME\"                 \"length_km\"  #>                   REACHCODE                  WBAREACOMI  #>              \"aggregate_id\"                      \"wbid\"  #>                       FTYPE                       FCODE  #>              \"feature_type\"         \"feature_type_code\"  #>                  StreamLeve                  StreamOrde  #>              \"stream_level\"                \"StreamOrde\"  #>                  StreamCalc                    FromNode  #>    \"dendritic_stream_order\"                  \"fromnode\"  #>                      ToNode                    Hydroseq  #>                    \"tonode\"                 \"topo_sort\"  #>                  LevelPathI                  Pathlength  #>                 \"levelpath\"             \"pathlength_km\"  #>                  TerminalPa                  ArbolateSu  #>        \"terminal_topo_sort\"              \"arbolate_sum\"  #>                  Divergence                   StartFlag  #>                \"divergence\"                \"start_flag\"  #>                  TerminalFl                     DnLevel  #>             \"terminal_flag\"           \"dn_stream_level\"  #>                  UpLevelPat                  UpHydroseq  #>              \"up_levelpath\"              \"up_topo_sort\"  #>                  DnLevelPat                  DnMinorHyd  #>              \"dn_levelpath\"        \"dn_minor_topo_sort\"  #>                  DnDrainCou                  DnHydroseq  #>                \"DnDrainCou\"              \"dn_topo_sort\"  #>                    FromMeas                      ToMeas  #> \"aggregate_id_from_measure\"   \"aggregate_id_to_measure\"  #>                      RtnDiv                       VPUIn  #>                    \"RtnDiv\"                     \"VPUIn\"  #>                      VPUOut                    AreaSqKM  #>                    \"VPUOut\"                   \"da_sqkm\"  #>                   TotDASqKM                        geom  #>             \"total_da_sqkm\"                      \"geom\""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hydroloom_names.html","id":null,"dir":"Reference","previous_headings":"","what":"hydroloom names — hydroloom_names","title":"hydroloom names — hydroloom_names","text":"Retrieve hydroloom name mapping hydroloom environment. Hydroloom uses specific set attribute names within package includes mappings names used data sources. function return names can used set additional name mappings. NOTE: values reset R restarted. Add desired settings project user .Rprofile make long term additions.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hydroloom_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hydroloom names — hydroloom_names","text":"","code":"hydroloom_names(x = NULL, clear = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/hydroloom_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hydroloom names — hydroloom_names","text":"x named character vector additional names add hydroloom environment. specified, names added current value stored hydroloom environment returned. clear logical TRUE, names removed replaced x.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hydroloom_name_definitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Hydroloom Name Definitions — hydroloom_name_definitions","title":"Hydroloom Name Definitions — hydroloom_name_definitions","text":"names character vector containing definitions attributes used hydroloom package.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hydroloom_name_definitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hydroloom Name Definitions — hydroloom_name_definitions","text":"","code":"cat(paste0(names(hydroloom_name_definitions), \", \",            hydroloom_name_definitions), sep = \"\\n\") #> , shared network identifier for catchment divide and flowpath or flowline #> , indicates to the downstream id. May or may not be dendritic #> , indicates the node representing the nexus upstream of a catchment #> , indicates the node represneting the nexus downstream of a catchment #> , indicates whether a catchment is not downstream of a diversion (0), #>                    the primary path downstream of a divergence (1), #>                    or a minor path downstream of a diversion (2). #> , waterbody id #> , total drainage area at the outlet of a catchment #> , local drainage area of a catchment #> , length of a single catchment's flowpath #> , distance from the outlet of a catchment to the terminal outlet of a network #> , total accumulated length of all upstream flowlines #> , Similar to hydrosequence in NHDPlus. Large topo_sort values #>                   are upstream of small topo_sort values. Note that there are #>                   many valid topological sort orders of a directed graph. #> , topo sort value of the upstream mainstem #> , topo sort value of the downstream mainstem #> , topo sort value of the downstream minor network element with the smallest id #> , topo sort value of the outlet network element #> , 1 for network terminous 0 for within network #> , id of terminal catchment for entire drainage basin #> , 1 for a headwater, 0 otherwise #> , provides an identifier for the collection of flowpaths #>                   that make up a single mainstem flowpath of a drainage #>                   basin #> , levelpath value of the upstream mainstem #> , levelpath value of the downstream mainstem #> , id of outlet catchment of a levelpath #> , starting at 1 for coastal terminals and 4 for inland terminals #>                      increments by 1 for each smaller tributary level #> , stream level of downstream mainstem network element #> , starting at 1 for headwaters increments by 1 for each larger #>                      tributary level, divergences adopt stream order from upstream #>                      but returning divergent network does not increment stream order #> , starting at 1 for headwaters and divirgences increments #>                                by 1 for each larger tributary level, is equal to #>                                stream_order along the dendritic network #> , descriptive feature type monicker #> , compact feature type identifier #> , identifier for processing units based on vector encapsulation #> , identifier for processing units based on raster encapsulation #> , interpolative linear reference measure along a single identified feature #> , aggregate identifier useful for 'reach' or 'flowpath' aggregation of flowlines #> , interpolative linear reference measure along an aggregate feature #> , interpolative linear reference for downstream end of a single #>                                   feature that makes up an aggregate feature #> , interpolative linear reference for the upstream end of a single #>                                 feature that makes up an aggregate feature #> , identifier of hydrologic location point #> , offset distance from point to line in units of linear reference analysis units"},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"reverse hy to original names — hy_reverse","title":"reverse hy to original names — hy_reverse","text":"renames hy object original names removes hy object attributes.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reverse hy to original names — hy_reverse","text":"","code":"hy_reverse(x)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reverse hy to original names — hy_reverse","text":"x data.frame network compatible hydroloom_names.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/hy_reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reverse hy to original names — hy_reverse","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\")) x <- hy(x)  hy_reverse(x) #> Simple feature collection with 746 features and 35 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 1496152 ymin: 1551203 xmax: 1527383 ymax: 1577303 #> CRS:           unknown #> # A tibble: 746 × 36 #>      COMID GNIS_ID GNIS_NAME LENGT…¹ REACH…² WBARE…³ FTYPE FCODE Strea…⁴ Strea…⁵ #>  *   <int> <chr>   <chr>       <dbl> <chr>     <int> <chr> <int>   <int>   <int> #>  1 8893864 991288  Northeas…   3.24  030300…       0 Stre… 46006       3       4 #>  2 8894490 991288  Northeas…   0.002 030300…       0 Conn… 33400       3       4 #>  3 8894494 991288  Northeas…   0.102 030300…       0 Conn… 33400       3       4 #>  4 8894334 991288  Northeas…   0.073 030300… 8892958 Arti… 55800       3       4 #>  5 8894492 991288  Northeas…   0.008 030300… 8892958 Arti… 55800       3       4 #>  6 8893850 991288  Northeas…   0.954 030300…       0 Stre… 46006       3       4 #>  7 8893842 991288  Northeas…   0.219 030300…       0 Stre… 46006       3       4 #>  8 8894192 991288  Northeas…   3.09  030300…       0 Stre… 46006       3       4 #>  9 8894310 991288  Northeas…   0.045 030300… 8892932 Arti… 55800       3       4 #> 10 8893810 991288  Northeas…   0.583 030300…       0 Stre… 46006       3       4 #> # … with 736 more rows, 26 more variables: StreamCalc <int>, FromNode <dbl>, #> #   ToNode <dbl>, Hydroseq <dbl>, LevelPathI <dbl>, Pathlength <dbl>, #> #   TerminalPa <dbl>, ArbolateSu <dbl>, Divergence <int>, StartFlag <int>, #> #   TerminalFl <int>, DnLevel <int>, UpLevelPat <dbl>, UpHydroseq <dbl>, #> #   DnLevelPat <dbl>, DnMinorHyd <dbl>, DnDrainCou <int>, DnHydroseq <dbl>, #> #   FromMeas <dbl>, ToMeas <dbl>, RtnDiv <int>, VPUIn <int>, VPUOut <int>, #> #   AreaSqKM <dbl>, TotDASqKM <dbl>, geom <MULTILINESTRING [m]>, and …"},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Index Points to Lines — index_points_to_lines","title":"Index Points to Lines — index_points_to_lines","text":"given sf point geometry column, return id, aggregate_id (e.g. reachcode), aggregate id measure point. #' @inheritParams add_levelpaths","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Index Points to Lines — index_points_to_lines","text":"","code":"index_points_to_lines(   x,   points,   search_radius = NULL,   precision = NA,   max_matches = 1 )  # S3 method for data.frame index_points_to_lines(   x,   points,   search_radius = NULL,   precision = NA,   max_matches = 1 )  # S3 method for hy index_points_to_lines(   x,   points,   search_radius = NULL,   precision = NA,   max_matches = 1 )"},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Index Points to Lines — index_points_to_lines","text":"points sf sfc type POINT analysis projection. NOTE: x projected projection points layer. search_radius units distance nearest neighbor search extend analysis projection. missing NULL, points lon lat projection, default 0.01 degree used, otherwise 200 m used. Conversion linear unit used provided crs points attempted. See RANN nn2 documentation details. precision numeric resolution measure precision output meters. max_matches numeric maximum number matches return multiple found search_radius","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Index Points to Lines — index_points_to_lines","text":"data.frame five columns, point_id, id, aggregate_id, aggregate_id_measure, offset. point_id row list element point input.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_lines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Index Points to Lines — index_points_to_lines","text":"Note 1: Inputs cast LINESTRINGS. , measure output inputs true multipart lines may error. Note 2: algorithm finds nearest node input flowlines identify flowline point belong . second pass, can calculate measure greater precision nearest flowline geometry node. Note 3: Offset returned units consistent projection input points. Note 4: See dfMaxLength input sf::st_segmentize() details handling precision parameter. Note 5: \"\" downstream -- 0 outlet \"\" upstream -- 100 inlet","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Index Points to Lines — index_points_to_lines","text":"","code":"source(system.file(\"extdata\", \"sample_flines.R\", package = \"nhdplusTools\"))  point <- sf::st_sfc(sf::st_point(c(-76.87479, 39.48233)),                     crs = 4326)  index_points_to_lines(sample_flines, point) #>   point_id    COMID      REACHCODE REACHCODE_measure       offset #> 1        1 11689978 02060003001472            51.502 0.0003010502  point <- sf::st_transform(point, 5070)  index_points_to_lines(sample_flines, point,                       search_radius = units::set_units(200, \"m\")) #> Warning: crs of lines and points don't match. attempting st_transform of lines #>   point_id    COMID      REACHCODE REACHCODE_measure   offset #> 1        1 11689978 02060003001472           51.8751 25.88438  index_points_to_lines(sample_flines, point, precision = 30) #> Warning: crs of lines and points don't match. attempting st_transform of lines #>   point_id    COMID      REACHCODE REACHCODE_measure   offset #> 1        1 11689978 02060003001472           52.4083 4.302007  index_points_to_lines(sample_flines,                       sf::st_sfc(list(sf::st_point(c(-76.86934, 39.49328)),                                       sf::st_point(c(-76.91711, 39.40884)),                                       sf::st_point(c(-76.88081, 39.36354))),                                  crs = 4326),                       search_radius = units::set_units(0.2, \"degrees\"),                       max_matches = 10) #>    point_id    COMID      REACHCODE REACHCODE_measure       offset #> 1         1 11688298 02060003000579            0.0000 6.026811e-05 #> 2         2 11688808 02060003000519           53.5874 5.641410e-04 #> 3         3 11688980 02060003000253           75.3779 3.102970e-04 #> 4         1 11689926 02060003001467          100.0000 6.026811e-05 #> 5         3 11688950 02060003000254           18.5358 1.131181e-03 #> 6         1 11689928 02060003001468            0.0000 2.026592e-03 #> 7         1 11689978 02060003001472          100.0000 2.026592e-03 #> 8         1 11690530 02060003000585            0.0000 2.853201e-03 #> 9         1 11690490 02060003000580            0.0000 2.853201e-03 #> 10        3 11688948 02060003000516            0.0000 3.207544e-03 #> 11        2 11690110 02060003001493          100.0000 7.424781e-03 #> 12        1 11690532 02060003000256            0.0000 4.513088e-03 #> 13        2 11688822 02060003000518           39.5280 7.677891e-03 #> 14        1 11688296 02060003000584            0.0000 6.017732e-03 #> 15        1 11688338 02060003000581            0.0000 6.017732e-03 #> 16        2 11688742 02060003000521            0.0000 8.549572e-03 #> 17        3 11689022 02060003000252           54.2321 6.961051e-03 #> 18        2 11688778 02060003000520            0.0000 8.549572e-03 #> 19        1 11687550 02060003000585           18.5588 6.832206e-03 #> 20        2 11690112 02060003001494          100.0000 9.547712e-03 #> 21        3 11688990 02060003000515            1.9144 8.652186e-03 #> 22        2 11690122 02060003001495          100.0000 1.026162e-02 #> 23        3 11689016 02060003000294           18.9609 1.162680e-02 #> 24        2 11688868 02060003000517           27.7564 1.694256e-02 #> 25        3 11689072 02060003000251          100.0000 1.366486e-02 #> 26        2 11690124 02060003001496          100.0000 1.953370e-02 #> 27        3 11690130 02060003001499            0.0000 1.638423e-02 #> 28        2 11690128 02060003001498          100.0000 2.099143e-02 #> 29        3 11689696 02060003000387            0.4731 1.872134e-02 #> 30        3 11689006 02060003000295            0.0000 1.876644e-02"},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_waterbodies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Waterbody Index — index_points_to_waterbodies","title":"Get Waterbody Index — index_points_to_waterbodies","text":"given sf point geometry column, return waterbody id, COMID dominant artificial path","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_waterbodies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Waterbody Index — index_points_to_waterbodies","text":"","code":"index_points_to_waterbodies(   waterbodies,   points,   flines = NULL,   search_radius = NULL )"},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_waterbodies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Waterbody Index — index_points_to_waterbodies","text":"waterbodies sf data.frame type POLYGON MULTIPOLYGON including \"wbid\" attribute. points sfc type POINT search_radius units class numeric value indicating far search waterbody boundary units provided projection. Set units set_units.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_waterbodies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Waterbody Index — index_points_to_waterbodies","text":"data.frame two columns, COMID, in_wb_COMID, near_wb_COMID, near_wb_dist, outlet_fline_COMID. Distance units provided projection.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/index_points_to_waterbodies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Waterbody Index — index_points_to_waterbodies","text":"","code":"source(system.file(\"extdata/sample_data.R\", package = \"nhdplusTools\"))  waterbodies <- sf::st_transform(   sf::read_sf(sample_data, \"NHDWaterbody\"), 5070)  points <- sf::st_transform(   sf::st_sfc(sf::st_point(c(-89.356086, 43.079943)),              crs = 4326), 5070)  index_points_to_waterbodies(waterbodies, points,                     search_radius = units::set_units(500, \"m\")) #>   near_wb_COMID near_wb_dist in_wb_COMID #> 1     167120949     272.8278   167120949"},{"path":"https://doi-usgs.github.io/hydroloom/reference/is.hy.html","id":null,"dir":"Reference","previous_headings":"","what":"is hy? — is.hy","title":"is hy? — is.hy","text":"test object valid according hy s3 class","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/is.hy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"is hy? — is.hy","text":"","code":"is.hy(x, silent = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/is.hy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"is hy? — is.hy","text":"x object test silent logical messages emitted?","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/is.hy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"is hy? — is.hy","text":"logical TRUE valid","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_fromids.html","id":null,"dir":"Reference","previous_headings":"","what":"Make fromids — make_fromids","title":"Make fromids — make_fromids","text":"given set index ids retrieved make_index_ids return adjacency matrix pointers identifiers flow row matrix question.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_fromids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make fromids — make_fromids","text":"","code":"make_fromids(index_ids, return_list = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_fromids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make fromids — make_fromids","text":"index_ids data.frame returned make_index_ids return_list logical TRUE, returned list include \"froms_list\" element containing ids list form.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_fromids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make fromids — make_fromids","text":"list containing \"froms\" matrix, \"lengths\" vector, optionally \"froms_list\" elements.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_fromids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make fromids — make_fromids","text":"","code":"x <- data.frame(id = c(1, 2, 3, 4, 5, 6, 7, 8, 9),               toid = c(2, 3, 4, 5, 0, 7, 8, 9, 4))  y <- make_index_ids(x)  make_fromids(y) #> $froms #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]   NA    1    2    3    4   NA    6    7    8 #> [2,]   NA   NA   NA    9   NA   NA   NA   NA   NA #>  #> $lengths #> [1] 0 1 1 2 1 0 1 1 1 #>"},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_index_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"make index ids — make_index_ids","title":"make index ids — make_index_ids","text":"makes index ids provided hy object. can used graph traversal algorithms row number id equal.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_index_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make index ids — make_index_ids","text":"","code":"make_index_ids(x, long_form = FALSE)  # S3 method for data.frame make_index_ids(x, long_form = FALSE)  # S3 method for hy make_index_ids(x, long_form = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_index_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make index ids — make_index_ids","text":"x data.frame network compatible hydroloom_names. long_form logical TRUE, return long-form version to_list. form can converted default list format format_index_ids.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_index_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make index ids — make_index_ids","text":"list containing named elements: : adjacency matrix lengths: vector indicating number connections node, : to_list: data.frame id, indid toindid list column. long_form = TRUE, return long form data.frame list column to_list. NOTE: long_form output used caution indid may correspond row number.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_index_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make index ids — make_index_ids","text":"","code":"x <- data.frame(id = c(1, 2, 3, 4, 5, 6, 7, 8, 9),               toid = c(2, 3, 4, 5, 0, 7, 8, 9, 4))  make_index_ids(x) #> $to #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    2    3    4    5    0    7    8    9    4 #>  #> $lengths #> 1 2 3 4 5 6 7 8 9  #> 1 1 1 1 1 1 1 1 1  #>  #> $to_list #>   id indid toindid #> 1  1     1       2 #> 2  2     2       3 #> 3  3     3       4 #> 4  4     4       5 #> 5  5     5       0 #> 6  6     6       7 #> 7  7     7       8 #> 8  8     8       9 #> 9  9     9       4 #>   x <- hy(sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\")))  x <- add_toids(x, return_dendritic = FALSE)  x <- make_index_ids(x)  names(x) #> [1] \"to\"      \"lengths\" \"to_list\" class(x$to) #> [1] \"matrix\" \"array\"  class(x$lengths) #> [1] \"numeric\" class(x$to_list) #> [1] \"data.frame\" is.list(x$to_list$toindid) #> [1] TRUE"},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_node_topology.html","id":null,"dir":"Reference","previous_headings":"","what":"make node topology from edge topology — make_node_topology","title":"make node topology from edge topology — make_node_topology","text":"creates node topology table edge topology","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_node_topology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make node topology from edge topology — make_node_topology","text":"","code":"make_node_topology(x, add_div = NULL, add = TRUE)  # S3 method for data.frame make_node_topology(x, add_div = NULL, add = TRUE)  # S3 method for hy make_node_topology(x, add_div = NULL, add = TRUE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_node_topology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make node topology from edge topology — make_node_topology","text":"x data.frame network compatible hydroloom_names. add_div data.frame containing id toid diverted paths add. id toid fields. add logical TRUE, node topology added x return.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_node_topology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"make node topology from edge topology — make_node_topology","text":"data.frame containing id, fromnode, tonode attributes attributes provided id, fromnode tonode first three columns.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/make_node_topology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make node topology from edge topology — make_node_topology","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  y <- dplyr::select(add_toids(x), -ToNode, -FromNode)  y <- make_node_topology(y)  # just the divergences which have unique fromids in x but don't in new hope. div <- add_toids(dplyr::select(x, COMID, FromNode, ToNode),                  return_dendritic = FALSE) div <- div[div$toid %in%            x$COMID[x$Divergence == 2],]  y <- dplyr::select(add_toids(x), -ToNode, -FromNode)  y <- make_node_topology(y, add_div = div)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_connected_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Paths — navigate_connected_paths","title":"Get Paths — navigate_connected_paths","text":"Given network set ids, finds paths lengths identified flowpath outlets. algorithm finds paths outlets regardless flow direction.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_connected_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Paths — navigate_connected_paths","text":"","code":"navigate_connected_paths(x, outlets, status = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_connected_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Paths — navigate_connected_paths","text":"x data.frame network compatible hydroloom_names. outlets vector ids data.frame status logical print status progress bars? cores integer number cores use parallel computation.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_connected_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Paths — navigate_connected_paths","text":"data.frame containing distance pairs network outlets list column containing flowpath identifiers along path connect outlets. network one terminal outlet, data.frame nrow(x)^2 rows.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_connected_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Paths — navigate_connected_paths","text":"","code":"x <- sf::read_sf(system.file(\"extdata\", \"walker.gpkg\", package = \"hydroloom\"))  outlets <- c(5329303, 5329357, 5329317, 5329365, 5329435, 5329817)  x <- add_toids(hy(x))  navigate_connected_paths(fl, outlets) #> Error in hy(x): object 'fl' not found"},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_hydro_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Navigate Hydro Network — navigate_hydro_network","title":"Navigate Hydro Network — navigate_hydro_network","text":"Navigates network connected catchments using NHDPlus style network attributes.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_hydro_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Navigate Hydro Network — navigate_hydro_network","text":"","code":"navigate_hydro_network(x, start, mode, distance = NULL)  # S3 method for data.frame navigate_hydro_network(x, start, mode, distance = NULL)  # S3 method for hy navigate_hydro_network(x, start, mode, distance = NULL)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_hydro_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Navigate Hydro Network — navigate_hydro_network","text":"x data.frame network compatible hydroloom_names. start character numeric match identifier attribute. starting catchment included. mode character chosen c(UM, DM, UT, DD). UM: upstream mainstem DM: downstream main UT: upstream tributaries DD: downstream diversions distance numeric distance km limit navigation. first catchment exceeds provided distance included.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_hydro_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Navigate Hydro Network — navigate_hydro_network","text":"vector identifiers found along navigation","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_hydro_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Navigate Hydro Network — navigate_hydro_network","text":"mode supplied, require network attributes displayed.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_hydro_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Navigate Hydro Network — navigate_hydro_network","text":"","code":"plot_fun <- function(x, s, n) {    plot(sf::st_geometry(x), col = \"grey\")    plot(sf::st_geometry(x[x$id %in% n, ]), add = TRUE)    plot(sf::st_geometry(x[x$id %in% s, ]), col = \"red\", lwd = 3, add = TRUE) }  x <- hy(sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\")))  start <- 8891126 dm <- navigate_hydro_network(x, start, \"DM\")  plot_fun(x, start, dm)   dd <- navigate_hydro_network(x, start, \"DD\")  plot_fun(x, start, dd)   start <- 8894356  um <- navigate_hydro_network(x, start, \"UM\")  plot_fun(x, start, um)   ut <- navigate_hydro_network(x, start, \"UT\")  plot_fun(x, start, ut)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_network_dfs.html","id":null,"dir":"Reference","previous_headings":"","what":"all paths depth first — navigate_network_dfs","title":"all paths depth first — navigate_network_dfs","text":"given starting node, return reachable paths. visited, node marked visited take part future path.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_network_dfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"all paths depth first — navigate_network_dfs","text":"","code":"navigate_network_dfs(x, starts, direction = \"down\", reset = FALSE)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_network_dfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"all paths depth first — navigate_network_dfs","text":"x data.frame network compatible hydroloom_names. starts vector ids x start . direction character \"\" supported far. reset logical TRUE, reset graph start later paths overlapping results.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_network_dfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"all paths depth first — navigate_network_dfs","text":"list containing dfs result start.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/navigate_network_dfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"all paths depth first — navigate_network_dfs","text":"","code":"x <- hy(sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\")))  x <- add_toids(x, return_dendritic = FALSE)  navigate_network_dfs(x, 8893402) #> [[1]] #> [[1]]$`1` #>  [1] 8893402 8894170 8893724 8893730 8893736 8893744 8893752 8893766 8893772 #> [10] 8893786 8894304 8894318 8894324 8894332 8894344 8894352 8894354 8894356 #> [19] 8894360 8897784 #>  #> [[1]]$`2` #> [1] 8893746 8893750 8893766 #>  #> [[1]]$`3` #> [1] 8893748 8893770 8893776 8893786 #>  #> [[1]]$`4` #>  [1] 8893784 8893792 8893794 8894306 8893804 8894316 8894320 8893808 8894322 #> [10] 8894324 #>  #> [[1]]$`5` #> [1] 8893788 8894302 8894318 #>  #> [[1]]$`6` #> [1] 8893764 8893772 #>  #> [[1]]$`7` #> [1] 8893742 8893744 #>  #>"},{"path":"https://doi-usgs.github.io/hydroloom/reference/rename_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"rename_geometry — rename_geometry","title":"rename_geometry — rename_geometry","text":"correctly renames geometry column sf object.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/rename_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rename_geometry — rename_geometry","text":"","code":"rename_geometry(g, name)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/rename_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rename_geometry — rename_geometry","text":"g sf data.table name character name used geometry","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/rename_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rename_geometry — rename_geometry","text":"","code":"(g <- sf::st_sf(a=3, geo = sf::st_sfc(sf::st_point(1:2)))) #> Simple feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #>   a         geo #> 1 3 POINT (1 2) rename_geometry(g, \"geometry\") #> Simple feature collection with 1 feature and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 1 ymin: 2 xmax: 1 ymax: 2 #> CRS:           NA #>   a    geometry #> 1 3 POINT (1 2)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/rescale_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale aggregate id measure to id measure — rescale_measures","title":"Rescale aggregate id measure to id measure — rescale_measures","text":"Given aggregate id (e.g. reachcode) measure measure id (e.g. comid flowline), returns measure along id line. utility specific NHDPlus data model many comid flowlines make single reachcode / reach. \"Measures\" typically referenced reaches. Flowlines stated -measure / -measure. cases useful rescale measure relative flowline. downstream -- 0 outlet upstream -- 100 inlet","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/rescale_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale aggregate id measure to id measure — rescale_measures","text":"","code":"rescale_measures(measure, from, to)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/rescale_measures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale aggregate id measure to id measure — rescale_measures","text":"measure numeric aggregate measure 0 100 numeric -measure relative aggregate numeric -measure relative aggregate","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/rescale_measures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale aggregate id measure to id measure — rescale_measures","text":"numeric rescaled measure","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/rescale_measures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale aggregate id measure to id measure — rescale_measures","text":"","code":"rescale_measures(40, 0, 50) #> [1] 80 rescale_measures(60, 50, 100) #> [1] 20"},{"path":"https://doi-usgs.github.io/hydroloom/reference/sort_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort Network — sort_network","title":"Sort Network — sort_network","text":"given network id toid, returns sorted potentially split set output. Can also used fast implementation upstream tributaries navigation. full network outlet returned sorted order.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/sort_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort Network — sort_network","text":"","code":"sort_network(x, split = FALSE, outlets = NULL)  # S3 method for data.frame sort_network(x, split = FALSE, outlets = NULL)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/sort_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort Network — sort_network","text":"x data.frame network compatible hydroloom_names. split logical TRUE, result split independent networks identified id outlet. outlet id independent network added \"terminalID\" attribute. outlets id x. specified, network emanating outlets considered returned.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/sort_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort Network — sort_network","text":"data.frame containing topologically sorted version requested network optionally terminal id.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/sort_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort Network — sort_network","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  g <- add_toids(x)  head(g <- sort_network(g)) #> Simple feature collection with 6 features and 36 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 1505349 ymin: 1554873 xmax: 1508920 ymax: 1558708 #> CRS:           unknown #> # A tibble: 6 × 37 #>     COMID    toid GNIS_ID  GNIS_NAME LENGT…¹ REACH…² WBARE…³ FTYPE FCODE Strea…⁴ #>     <int>   <dbl> <chr>    <chr>       <dbl> <chr>     <int> <chr> <int>   <int> #> 1 8898302 8896658 \"983820\" \"Cub Cre…   0.182 030300… 8894960 Arti… 55800       4 #> 2 8896658 8896656 \"983820\" \"Cub Cre…   1.37  030300…       0 Stre… 46003       4 #> 3 8896656 8896624 \"983820\" \"Cub Cre…   2.64  030300…       0 Stre… 46006       4 #> 4 8896664 8896624 \" \"      \" \"         1.64  030300…       0 Stre… 46003       5 #> 5 8896624 8896570 \"983820\" \"Cub Cre…   1.17  030300…       0 Stre… 46006       4 #> 6 8896572 8896570 \" \"      \" \"         1.77  030300…       0 Stre… 46003       5 #> # … with 27 more variables: StreamOrde <int>, StreamCalc <int>, FromNode <dbl>, #> #   ToNode <dbl>, Hydroseq <dbl>, LevelPathI <dbl>, Pathlength <dbl>, #> #   TerminalPa <dbl>, ArbolateSu <dbl>, Divergence <int>, StartFlag <int>, #> #   TerminalFl <int>, DnLevel <int>, UpLevelPat <dbl>, UpHydroseq <dbl>, #> #   DnLevelPat <dbl>, DnMinorHyd <dbl>, DnDrainCou <int>, DnHydroseq <dbl>, #> #   FromMeas <dbl>, ToMeas <dbl>, RtnDiv <int>, VPUIn <int>, VPUOut <int>, #> #   AreaSqKM <dbl>, TotDASqKM <dbl>, geom <MULTILINESTRING [m]>, and …  g$topo_sort <- nrow(g):1  plot(g['topo_sort'])   g <- add_toids(x, return_dendritic = FALSE)  g <- sort_network(g)  g$topo_sort <- nrow(g):1  plot(g['topo_sort'])"},{"path":"https://doi-usgs.github.io/hydroloom/reference/st_compatibalize.html","id":null,"dir":"Reference","previous_headings":"","what":"make spatial inputs compatible — st_compatibalize","title":"make spatial inputs compatible — st_compatibalize","text":"makes sf1 compatible sf2 projecting projection 2 ensuring geometry columns name.","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/st_compatibalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"make spatial inputs compatible — st_compatibalize","text":"","code":"st_compatibalize(sf1, sf2)"},{"path":"https://doi-usgs.github.io/hydroloom/reference/st_compatibalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"make spatial inputs compatible — st_compatibalize","text":"sf1 sf data.frame sf2 sf data.frame","code":""},{"path":"https://doi-usgs.github.io/hydroloom/reference/st_compatibalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"make spatial inputs compatible — st_compatibalize","text":"","code":"x <- sf::read_sf(system.file(\"extdata/new_hope.gpkg\", package = \"hydroloom\"))  one <- dplyr::select(x) two <- sf::st_transform(one, 5070)  attr(one, \"sf_column\") <- \"geotest\" names(one)[names(one) == \"geom\"] <- \"geotest\"  st_compatibalize(one, two) #> Simple feature collection with 746 features and 0 fields #> Geometry type: MULTILINESTRING #> Dimension:     XY #> Bounding box:  xmin: 1496152 ymin: 1551203 xmax: 1527383 ymax: 1577303 #> Projected CRS: NAD83 / Conus Albers #> # A tibble: 746 × 1 #>                                                                             geom #>  *                                                         <MULTILINESTRING [m]> #>  1 ((1518702 1557298, 1518643 1557297, 1518632 1557288, 1518631 1557209, 151861… #>  2                                          ((1517194 1556000, 1517192 1555999)) #>  3 ((1517288 1556038, 1517252 1556023, 1517215 1556010, 1517200 1556004, 151719… #>  4                         ((1517349 1556090, 1517341 1556077, 1517295 1556041)) #>  5                                          ((1517295 1556041, 1517288 1556038)) #>  6 ((1518668 1557990, 1518699 1557904, 1518722 1557890, 1518753 1557831, 151880… #>  7 ((1518694 1558172, 1518702 1558142, 1518729 1558118, 1518738 1558086, 151866… #>  8 ((1519790 1560148, 1519772 1560132, 1519738 1560110, 1519545 1560059, 151949… #>  9                         ((1519833 1560160, 1519803 1560151, 1519790 1560148)) #> 10 ((1520229 1560983, 1520199 1560918, 1520183 1560868, 1520134 1560844, 152012… #> # … with 736 more rows"},{"path":"https://doi-usgs.github.io/hydroloom/news/index.html","id":"hydroloom-100","dir":"Changelog","previous_headings":"","what":"hydroloom 1.0.0","title":"hydroloom 1.0.0","text":"Initialized new project","code":""}]
